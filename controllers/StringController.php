<?php
/**
 * Author: jiangm
 * Email: jmphper@foxmail.com
 * Date: 2017/10/25
 * Time: 13:51
 * Desc: 字符串处理测试
 */

namespace app\controllers;

use Yii;
use yii\web\Controller;

class StringController extends Controller
{
    /**
     * 构造函数
     */
    public function init()
    {
        // 一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode
        // sting 最大可达到2GB
        parent::init(); // TODO: Change the autogenerated stub
        $this->layout = false;
    }

    /**
     * 单引号
     * 1. 单引号中反斜线只能转义单引号和反斜线本身，列如：\',\\
     */
    public function actionSingleQuotes(){
        
    }

    /**
     * 双引号
     * 1. 可以用反斜线转义特殊字符
     * \n	换行（ASCII 字符集中的 LF 或 0x0A (10)）
     * \r	回车（ASCII 字符集中的 CR 或 0x0D (13)）
     * \t	水平制表符（ASCII 字符集中的 HT 或 0x09 (9)）
     * \v	垂直制表符（ASCII 字符集中的 VT 或 0x0B (11)）（自 PHP 5.2.5 起）
     * \e	Escape（ASCII 字符集中的 ESC 或 0x1B (27)）（自 PHP 5.4.0 起）
     * \f	换页（ASCII 字符集中的 FF 或 0x0C (12)）（自 PHP 5.2.5 起）
     * \\	反斜线
     * \$	美元标记
     * \"	双引号
     * \[0-7]{1,3}	符合该正则表达式序列的是一个以八进制方式来表达的字符
     * \x[0-9A-Fa-f]{1,2}	符合该正则表达式序列的是一个以十六进制方式来表达的字符
     * 
     * 2. 可以解析变量
     * 3. 可以使用花括号语法
     */
    public function actionDoubleQuotes(){
        
    }

    /**
     * 字符串定界符（标志符） heredoc 结构类似于双引号字符串
     *
     * 语法结构：<<<EOF
     *      在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。
     * EOF;
     *
     * 1. 标志只能包含字母、数字和下划线，只能以字母和下划线开头
     * 2. 结束符前不能有任何内容，像制表符和空格都不可以
     * 3. PHP3.5之后可以将标志符用双引号包括起来，作用和双引号一样
     * 4. Heredocs 结构不能用来初始化类的属性。在 PHP 5.3.0 以后，也可以用 Heredoc 结构来初始化静态变量和类的属性和常量。
     * 5. 自 PHP 5.3.0 起还可以在 Heredoc 结构中用双引号来声明标识符
     *
     */
    public function actionHeredoc(){

        // 也可以把 Heredoc 结构用在函数参数中来传递数据
        echo '<br/>';
        var_dump(array(<<<EOD
foobar!
EOD
        ));

    }

    /**
     * 字符串定界符 nowdoc 结构类似于单引号字符串
     *
     * 语法结构：<<<'EOF'
     *      在该运算符之后要提供一个标识符，然后换行。接下来是字符串 string 本身，最后要用前面定义的标识符作为结束标志。不同的是开始标志符要用单引号包括起来
     * EOF;
     *
     * 1. 不进行解析操作
     * 2. nowdoc 结构可以用在任意的静态数据环境中，最典型的示例是用来初始化类的属性或常量
     * 3. Nowdoc 结构是在 PHP 5.3.0 中加入的。
     * 
     */
    public function actionNowDoc(){
        
    }

    /**
     * 变量简单解析
     * 1. 可以解析普通变量，数组和对象
     */
    public function actionSimpleAnalysis(){

    }

    /**
     * 变量复杂解析
     * 1. 使用花括号确定变量的界限
     * 2. 函数、方法、静态类变量和类常量只有在 PHP 5 以后才可在 {$} 中使用。然而，只有在该字符串被定义的命名空间中才可以将其值作为变量名来访问。只单一使用花括号 ({}) 无法处理从函数或方法的返回值或者类常量以及类静态变量的值。
     */
    public function actionComplex(){
        
    }

    /**
     * 存取和修改字符串中的字符
     * 1. 可以使用访问数组的方法访问字符串的每个字符，也可以使用花括号
     * 2. 用超出字符串长度的下标写入将会拉长该字符串并以空格填充。非整数类型下标会被转换成整数。非法下标类型会产生一个 E_NOTICE 级别错误。用负数下标写入字符串时会产生一个 E_NOTICE 级别错误，用负数下标读取字符串时返回空字符串。写入时只用到了赋值字符串的第一个字符。用空字符串赋值则赋给的值是 NULL 字符
     * 3. PHP 的字符串在内部是字节组成的数组。因此用花括号访问或修改字符串对多字节字符集很不安全。仅应对单字节编码例如 ISO-8859-1 的字符串进行此类操作
     * 4. 自 PHP 5.4 起字符串下标必须为整数或可转换为整数的字符串，否则会发出警告。
     * 5. 用 [] 或 {} 访问任何其它类型（不包括数组或具有相应接口的对象实现）的变量只会无声地返回 NULL。
     * 6. PHP 5.5 增加了直接在字符串原型中用 [] 或 {} 访问字符的支持。
     */
    public function actionCRUDString(){

    }

    /**
     * 有用的函数和运算符
     * 1. 字符串可以用 '.'（点）运算符连接起来，注意 '+'（加号）运算符没有这个功能
     * 2. 可以参考字符串函数了解大部分函数，高级的查找与替换功能可以参考正则表达式函数或 Perl 兼容正则表达式函数。
     * 另外还有 URL 字符串函数，也有加密／解密字符串的函数（mcrypt 和 mhash）。
     * 最后，可以参考字符类型函数。
     * 
     */
    public function actionStringFunctionAndOperators(){

    }

    /**
     * 转换成字符串
     * 1. 
     */
    public function actionConvertingToStirng(){

    }

    public function actionTest(){
        echo '"000"和0 ';
        if('000' == 0){
            echo '相等';
        }else{
            echo '不相等';
        }
        echo '<br/>';

    }

    public function actionLength(){
        $str = Yii::$app->request->get('str','');
        echo '<h3>strlen</h3>';
        echo strlen($str);
        echo '<br/>';
        echo '<h3>mb_strlen</h3>';
        echo mb_strlen($str, 'utf-8');
        echo '<br/>';
    }

    public function actionPassword(){
        echo md5(md5('123456789qwer').'1234');
    }


}